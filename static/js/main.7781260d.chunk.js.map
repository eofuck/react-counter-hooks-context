{"version":3,"sources":["Counter.js","App.js","index.js"],"names":["CounterHooks","initialCount","console","log","useState","count","setCount","style","useContext","ThemeContext","onClick","prevCount","React","createContext","App","theme","setTheme","Provider","value","backgroundColor","PrevTheme","ReactDOM","render","document","getElementById"],"mappings":"wJAOe,SAASA,EAAT,GAAyC,IAAjBC,EAAgB,EAAhBA,aACrCC,QAAQC,IAAI,kBACZ,MAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACMC,EAAQC,qBAAWC,GAEzB,OACE,gCACE,wBACEF,MAAOA,EACPG,QAAS,kBAAMJ,GAAS,SAACK,GAAD,OAAeA,EAAY,MAFrD,eAMA,+BAAON,IACP,wBACEE,MAAOA,EACPG,QAAS,kBAAMJ,GAAS,SAACK,GAAD,OAAeA,EAAY,MAFrD,kBCdC,IAAMF,EAAeG,IAAMC,gBA8BnBC,MA5Bf,WAIEZ,QAAQC,IAAI,cAEZ,MAA0BC,mBAAS,OAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAEA,OAGE,cAFA,CAECP,EAAaQ,SAAd,CAAuBC,MAAO,CAAEC,gBAAiBJ,GAAjD,UAGE,cAAC,EAAD,CAASd,aAAc,IACvB,wBACES,QAAS,kBACPM,GAAS,SAACI,GACR,MAAqB,QAAdA,EAAsB,OAAS,UAH5C,8BCpBNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7781260d.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { ThemeContext } from './App';\n\n//Hooks need to be called in the exact same order every single time\n//and also they need to be at the top level of your functiom\n//you can't put hooks in if statements because they would render conditionally\n\nexport default function CounterHooks({ initialCount }) {\n  console.log('Render Counter');\n  const [count, setCount] = useState(initialCount);\n  const style = useContext(ThemeContext);\n\n  return (\n    <div>\n      <button\n        style={style}\n        onClick={() => setCount((prevCount) => prevCount - 1)}\n      >\n        -\n      </button>\n      <span>{count}</span>\n      <button\n        style={style}\n        onClick={() => setCount((prevCount) => prevCount + 1)}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Counter from './Counter';\n\n//Context has provider and consumer\n//Provider passes value and consumer consumes it\n//also when context get's changed it doesn't rerender app\n//yo need to use state for it\nexport const ThemeContext = React.createContext();\n\nfunction App() {\n  //it gets consoled only once when page loads and not everytime <Counter/> rerenders\n  //because when state changes it only renders component you are inside of\n  //and any child components that are rendered from that component\n  console.log('Render App');\n\n  const [theme, setTheme] = useState('red');\n\n  return (\n    //all of the code inside <ThemeContext.Provider/> can access it\n    //this attribute always needs to be caled value\n    <ThemeContext.Provider value={{ backgroundColor: theme }}>\n      {/* passed down initialCount as 0 down to <Counter/> as props,\n      you access it by deconstructing it inside function parameters*/}\n      <Counter initialCount={1} />\n      <button\n        onClick={() =>\n          setTheme((PrevTheme) => {\n            return PrevTheme === 'red' ? 'blue' : 'red';\n          })\n        }\n      >\n        Toggle Theme\n      </button>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}